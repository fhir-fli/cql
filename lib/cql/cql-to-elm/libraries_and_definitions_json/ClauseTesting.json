{
    "library": {
        "annotation": [
            {
                "translatorVersion": "2.11.0",
                "translatorOptions": "",
                "type": "CqlToElmInfo"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 12,
                "startChar": 11,
                "endLine": 12,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 18,
                "startChar": 11,
                "endLine": 18,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 21,
                "startChar": 11,
                "endLine": 21,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 24,
                "startChar": 11,
                "endLine": 24,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 30,
                "startChar": 11,
                "endLine": 30,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 33,
                "startChar": 11,
                "endLine": 33,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 36,
                "startChar": 11,
                "endLine": 36,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 42,
                "startChar": 11,
                "endLine": 42,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 45,
                "startChar": 11,
                "endLine": 45,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 48,
                "startChar": 11,
                "endLine": 48,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 54,
                "startChar": 11,
                "endLine": 54,
                "endChar": 11,
                "message": "Syntax error at ,",
                "errorType": "syntax",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 6,
                "startChar": 2,
                "endLine": 6,
                "endChar": 69,
                "message": "Could not resolve type name ObservationResult.",
                "errorType": "semantic",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            },
            {
                "libraryId": "ClauseTesting",
                "startLine": 9,
                "startChar": 2,
                "endLine": 9,
                "endChar": 33,
                "message": "Could not resolve type name ObservationResult.",
                "errorType": "semantic",
                "errorSeverity": "error",
                "type": "CqlToElmError"
            }
        ],
        "identifier": {
            "id": "ClauseTesting"
        },
        "schemaIdentifier": {
            "id": "urn:hl7-org:elm",
            "version": "r1"
        },
        "usings": {
            "def": [
                {
                    "localIdentifier": "System",
                    "uri": "urn:hl7-org:elm-types:r1"
                },
                {
                    "localIdentifier": "QUICK",
                    "uri": "http://hl7.org/fhir"
                }
            ]
        },
        "statements": {
            "def": [
                {
                    "name": "SimpleQuery",
                    "context": "Patient",
                    "accessLevel": "Public",
                    "expression": {
                        "type": "Null"
                    }
                },
                {
                    "name": "WhereClause",
                    "context": "Patient",
                    "accessLevel": "Public",
                    "expression": {
                        "type": "Query",
                        "source": [
                            {
                                "alias": "R",
                                "expression": {
                                    "type": "Null"
                                }
                            }
                        ],
                        "relationship": [],
                        "where": {
                            "type": "Null"
                        }
                    }
                },
                {
                    "name": "TargetEncounters",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "SimpleRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "CodedRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "ExplicitlyCodedRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "CodedWhere",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "RangedRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "ExplicitlyRangedRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "RangedWhere",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "CodedRangedRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "ExplicitlyCodedRangedRetrieve",
                    "context": "Patient",
                    "accessLevel": "Public"
                },
                {
                    "name": "CodedRangedWhere",
                    "context": "Patient",
                    "accessLevel": "Public"
                }
            ]
        }
    }
}